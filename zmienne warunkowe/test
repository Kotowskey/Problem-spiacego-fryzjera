#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h> //Standardowe biblioteki
#include <stdbool.h> //Sprawdzenie czy fotel fryzjera jest zajety
#include <time.h> // Pseudolosowosc przychodzenia klientow
#include <math.h> //Dla funkcji marnujcej czas

#define MAX_ITERATIONS 1000000000 //Dla funkcji marnujacej czasS

pthread_mutex_t mutex;
pthread_cond_t cond_barber; //Dla fryzjera
pthread_cond_t cond_customer; //Dla klientow

int waiting_customers = 0; //Zmienna pomocnicza dla komunikatow
int rezygnacje = 0; //Zmienna pomocnicza dla komunikatow
bool barber_chair = false; //Sprawdzamy czy fryzjer strzyze
int num_chairs; //Zmienna podawana przy uruchomieniu programu wynikajaca ze specyfikacji

void busy_wait(int iterations) { //Prosta funkcja marnujaca czas. Zamiennik sleep()
    for (volatile int i = 0; i < iterations; i++){
        int sum = sqrt(i);
    };
}

void* barber(void* arg) { //Funkcja fryzjera
    while (1) {
        pthread_mutex_lock(&mutex);

        while (waiting_customers == 0) {
            printf("Fryzjer ucina sobie drzemkę i czeka na klienta\n");
            pthread_cond_wait(&cond_barber, &mutex);
        }

        printf("Fryzjer zaczyna strzyc...\n");
        waiting_customers--;
        barber_chair = true;

        pthread_cond_signal(&cond_customer);
        pthread_mutex_unlock(&mutex);

        // Symulacja strzyżeniaSS
        busy_wait(rand() % MAX_ITERATIONS);

        pthread_mutex_lock(&mutex);
        printf("Fryzjer zakończył strzyżenie.\n");
        barber_chair = false;
        pthread_cond_broadcast(&cond_customer);
        pthread_mutex_unlock(&mutex);
    }
    return NULL;
}

void* customer(void* arg) { // Funkcja klienta
    int id = *(int*)arg;
    pthread_mutex_lock(&mutex);

    if (waiting_customers < num_chairs) {
        //printf("Klient %d w poczekalni. Poczekalnia: %d/%d\n", id, waiting_customers, num_chairs);
        waiting_customers++;

        pthread_cond_signal(&cond_barber);

        while (barber_chair) {
            pthread_cond_wait(&cond_customer, &mutex);
        }

        //printf("Klient %d jest strzyżony.\n", id);
        printf("Rezygnacja: %d Poczekalnia: %d/%d, [Fotel: %d]\n", rezygnacje, waiting_customers, num_chairs, id);
        barber_chair = true;
    } else {
        //printf("Klient %d odchodzi, brak miejsca.\n", id);
        rezygnacje+=1;
    }

    pthread_mutex_unlock(&mutex);
    return NULL;
}

int main(int argc, char** argv) {
    //Obsluga bledow
    if (argc != 2) {
        printf("Podaj prawidłową liczbę argumentów!\n");
        return EXIT_FAILURE;
    }

    num_chairs = atoi(argv[1]);
    if (num_chairs <= 0) {
        printf("Liczba krzeseł musi być większa niż 0!\n");
        return EXIT_FAILURE;
    }

    pthread_t barber_thread;
    pthread_t customer_thread;
    int customer_id = 1;

    pthread_mutex_init(&mutex, NULL);
    pthread_cond_init(&cond_barber, NULL);
    pthread_cond_init(&cond_customer, NULL);

    pthread_create(&barber_thread, NULL, barber, NULL);
    //Glowna petla programu
    while (1) {
        pthread_create(&customer_thread, NULL, customer, &customer_id);
        customer_id++;
        busy_wait(rand() % MAX_ITERATIONS);
        //sleep(1);
    }

    pthread_cancel(barber_thread);
    pthread_join(barber_thread, NULL);

    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&cond_barber);
    pthread_cond_destroy(&cond_customer);

    return EXIT_SUCCESS;
}
