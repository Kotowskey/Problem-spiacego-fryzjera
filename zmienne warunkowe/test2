#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>
#include <stdbool.h>
#include <time.h>
#include <math.h>

#define MAX_ITERATIONS 1000000000

pthread_mutex_t mutex;
pthread_cond_t cond_barber;
pthread_cond_t cond_customer;

int rezygnacje = 0;
bool barber_chair = false;
int num_chairs;

typedef struct Node {
    int id;
    struct Node* next;
} Node;

typedef struct Queue {
    Node* front;
    Node* rear;
    int size;
} Queue;

Queue waiting_queue;

void queue_init(Queue* q) {
    q->front = q->rear = NULL;
    q->size = 0;
}

bool queue_is_empty(Queue* q) {
    return q->size == 0;
}

void enqueue(Queue* q, int id) {
    Node* new_node = (Node*)malloc(sizeof(Node));
    new_node->id = id;
    new_node->next = NULL;
    if (q->rear == NULL) {
        q->front = q->rear = new_node;
    } else {
        q->rear->next = new_node;
        q->rear = new_node;
    }
    q->size++;
}

int dequeue(Queue* q) {
    if (queue_is_empty(q)) {
        return -1; // Kolejka jest pusta
    }
    Node* temp = q->front;
    int id = temp->id;
    q->front = q->front->next;
    if (q->front == NULL) {
        q->rear = NULL;
    }
    free(temp);
    q->size--;
    return id;
}

void busy_wait(int iterations) {
    for (volatile int i = 0; i < iterations; i++) {
        int sum = sqrt(i);
    }
}

void* barber(void* arg) {
    while (1) {
        pthread_mutex_lock(&mutex);

        while (queue_is_empty(&waiting_queue)) {
            printf("Fryzjer ucina sobie drzemkę i czeka na klienta\n");
            pthread_cond_wait(&cond_barber, &mutex);
        }

        int customer_id = dequeue(&waiting_queue);
        printf("Fryzjer zaczyna strzyc klienta %d...\n", customer_id);

        barber_chair = true;
        pthread_cond_signal(&cond_customer);
        pthread_mutex_unlock(&mutex);

        busy_wait(rand() % MAX_ITERATIONS);

        pthread_mutex_lock(&mutex);
        printf("Fryzjer zakończył strzyżenie klienta %d.\n", customer_id);
        barber_chair = false;
        pthread_cond_broadcast(&cond_customer);
        pthread_mutex_unlock(&mutex);
    }
    return NULL;
}

void* customer(void* arg) {
    int id = *(int*)arg;
    pthread_mutex_lock(&mutex);

    if (waiting_queue.size < num_chairs) {
        enqueue(&waiting_queue, id);
        printf("Klient %d w poczekalni. Poczekalnia: %d/%d\n", id, waiting_queue.size, num_chairs);

        pthread_cond_signal(&cond_barber);

        while (barber_chair) {
            pthread_cond_wait(&cond_customer, &mutex);
        }

        printf("Klient %d jest strzyżony.\n", id);
        barber_chair = true;
    } else {
        printf("Klient %d odchodzi, brak miejsca.\n", id);
        rezygnacje++;
    }

    pthread_mutex_unlock(&mutex);
    return NULL;
}

int main(int argc, char** argv) {
    if (argc != 2) {
        printf("Podaj prawidłową liczbę argumentów!\n");
        return EXIT_FAILURE;
    }

    num_chairs = atoi(argv[1]);
    if (num_chairs <= 0) {
        printf("Liczba krzeseł musi być większa niż 0!\n");
        return EXIT_FAILURE;
    }

    pthread_t barber_thread;
    pthread_mutex_init(&mutex, NULL);
    pthread_cond_init(&cond_barber, NULL);
    pthread_cond_init(&cond_customer, NULL);
    queue_init(&waiting_queue);

    pthread_create(&barber_thread, NULL, barber, NULL);

    int customer_id = 1;
    while (1) {
        pthread_t customer_thread;
        int* id_ptr = malloc(sizeof(int));
        *id_ptr = customer_id;
        pthread_create(&customer_thread, NULL, customer, id_ptr);
        customer_id++;
        busy_wait(rand() % MAX_ITERATIONS);
        free(id_ptr); // zwolnienie pamięci alokowanej dla id
    }

    pthread_cancel(barber_thread);
    pthread_join(barber_thread, NULL);

    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&cond_barber);
    pthread_cond_destroy(&cond_customer);

    return EXIT_SUCCESS;
}
